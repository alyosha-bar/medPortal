// Code generated by MockGen. DO NOT EDIT.
// Source: ./handlers/reception_handler.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	reflect "reflect"

	models "github.com/alyosha-bar/medPortal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockReceptionService is a mock of ReceptionService interface.
type MockReceptionService struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionServiceMockRecorder
}

// MockReceptionServiceMockRecorder is the mock recorder for MockReceptionService.
type MockReceptionServiceMockRecorder struct {
	mock *MockReceptionService
}

// NewMockReceptionService creates a new mock instance.
func NewMockReceptionService(ctrl *gomock.Controller) *MockReceptionService {
	mock := &MockReceptionService{ctrl: ctrl}
	mock.recorder = &MockReceptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionService) EXPECT() *MockReceptionServiceMockRecorder {
	return m.recorder
}

// AssignPatient mocks base method.
func (m *MockReceptionService) AssignPatient(patientID, doctorID uint) (models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPatient", patientID, doctorID)
	ret0, _ := ret[0].(models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignPatient indicates an expected call of AssignPatient.
func (mr *MockReceptionServiceMockRecorder) AssignPatient(patientID, doctorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPatient", reflect.TypeOf((*MockReceptionService)(nil).AssignPatient), patientID, doctorID)
}

// DeletePatientProfile mocks base method.
func (m *MockReceptionService) DeletePatientProfile(patientID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePatientProfile", patientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePatientProfile indicates an expected call of DeletePatientProfile.
func (mr *MockReceptionServiceMockRecorder) DeletePatientProfile(patientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientProfile", reflect.TypeOf((*MockReceptionService)(nil).DeletePatientProfile), patientID)
}

// GetAllDoctors mocks base method.
func (m *MockReceptionService) GetAllDoctors() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDoctors")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDoctors indicates an expected call of GetAllDoctors.
func (mr *MockReceptionServiceMockRecorder) GetAllDoctors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDoctors", reflect.TypeOf((*MockReceptionService)(nil).GetAllDoctors))
}

// GetAllPatients mocks base method.
func (m *MockReceptionService) GetAllPatients() ([]models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPatients")
	ret0, _ := ret[0].([]models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPatients indicates an expected call of GetAllPatients.
func (mr *MockReceptionServiceMockRecorder) GetAllPatients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPatients", reflect.TypeOf((*MockReceptionService)(nil).GetAllPatients))
}

// GetPatient mocks base method.
func (m *MockReceptionService) GetPatient(patientID uint) (models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatient", patientID)
	ret0, _ := ret[0].(models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatient indicates an expected call of GetPatient.
func (mr *MockReceptionServiceMockRecorder) GetPatient(patientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatient", reflect.TypeOf((*MockReceptionService)(nil).GetPatient), patientID)
}

// RegisterPatient mocks base method.
func (m *MockReceptionService) RegisterPatient(patient models.Patient) (models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPatient", patient)
	ret0, _ := ret[0].(models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterPatient indicates an expected call of RegisterPatient.
func (mr *MockReceptionServiceMockRecorder) RegisterPatient(patient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPatient", reflect.TypeOf((*MockReceptionService)(nil).RegisterPatient), patient)
}

// UpdateField mocks base method.
func (m *MockReceptionService) UpdateField(patientID uint, field string, value interface{}) (models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateField", patientID, field, value)
	ret0, _ := ret[0].(models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateField indicates an expected call of UpdateField.
func (mr *MockReceptionServiceMockRecorder) UpdateField(patientID, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateField", reflect.TypeOf((*MockReceptionService)(nil).UpdateField), patientID, field, value)
}
